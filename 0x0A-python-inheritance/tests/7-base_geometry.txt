The ``7-base_geometry`` module
======================

Using ``BaseGeometry``
-------------------

Importing the function from the module:
	 >>> BaseGeometry = __import__("7-base_geometry").BaseGeometry

Checking for module docstring:
	 >>> m = __import__("7-base_geometry").__doc__
	 >>> len(m) > 1
	 True

Checking for function docstring:
	 >>> f = __import__("7-base_geometry").BaseGeometry.__doc__
         >>> len(f) > 1
         True

Checking for normal integer
	 >>> b = BaseGeometry()
	 >>> b.integer_validator("square", 7)
	 
Checking for non integer
	 >>> b = BaseGeometry()
	 >>> b.integer_validator("square", 7.6)
	 Traceback (most recent call last):
	 ...
	 <name> must be an integer
	 
Checking for integer less than zero
	 >>> b = BaseGeometry()
	 >>> b.integer_validator("square", -7)
	 Traceback (most recent call last):
	 ...
	 <name> must be an greater than 0
	 
Checking for integer zero
	 >>> b = BaseGeometry()
	 >>> b.integer_validator("square", 0)
	 Traceback (most recent call last):
	 ...
	 <name> must be an greater than 0
	 
Checking for arguments more than two 
	 >>> b = BaseGeometry()
	 >>> b.integer_validator("square", 6, 7)
	 Traceback (most recent call last):
	 ...
	 TypeError: integer_validator takes 2 positional argument but 3 were given
	 
Checking for non-integer types:
	 >>> b.integer_validator("bool", True)
	 Traceback (most recent call last):
         ...
         TypeError: bool must be an integer
	 >>> b.integer_validator("float", 1.5)
         Traceback (most recent call last):
         ...
         TypeError: float must be an integer
	 >>> b.integer_validator("complex", complex(1, 1))
         Traceback (most recent call last):
         ...
         TypeError: complex must be an integer
	 >>> b.integer_validator("string", "hello")
         Traceback (most recent call last):
         ...
         TypeError: string must be an integer
	 >>> b.integer_validator("tuple", (1, 2))
         Traceback (most recent call last):
         ...
         TypeError: tuple must be an integer
	 >>> b.integer_validator("list", [1, 2, 3])
	 Traceback (most recent call last):
         ...
         TypeError: list must be an integer
	 >>> b.integer_validator("dict", {"key": "value"})
         Traceback (most recent call last):
         ...
         TypeError: dict must be an integer
	 >>> b.integer_validator("set", {"hello", "world"})
         Traceback (most recent call last):
         ...
         TypeError: set must be an integer
	 >>> b.integer_validator("frozenset", frozenset(["hello", "world"]))
         Traceback (most recent call last):
         ...
         TypeError: frozenset must be an integer
	 >>> b.integer_validator("bytes", b"bytes")
         Traceback (most recent call last):
         ...
         TypeError: bytes must be an integer
	 >>> b.integer_validator("bytearrays", bytearray(b"bytes"))
         Traceback (most recent call last):
         ...
         TypeError: bytearrays must be an integer

Checking for no arguments to integer_validator:
	 >>> b.integer_validator()
	 Traceback (most recent call last):
         ...
	 TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

